/*
           Copyright (C) 2022 ExoTerra Corp - All Rights Reserved

 Unauthorized copying of this file via any medium is strictly prohibited.
 Proprietary and confidential.  Any unauthorized use, duplication, transmission,
 distribution, or disclosure of this software is expressly forbidden.

 This Copyright notice may not be removed or modified without prior written
 consent of ExoTerra Corp.  ExoTerra Corp reserves the right to modify this 
 software without notice.

 ExoTerra Corp
 7640 S. Alkire Pl.
 Littleton, CO 80127
 USA

 Voice:  +1 (720) 788-2010
 http:   www.exoterracorp.com
 email:  contact@exoterracorp.com
*/

#ifndef MAGNET_MCU_H
#define	MAGNET_MCU_H

#include "component_service.h"
#include "ext_decl_define.h"
#include "mcu_include.h"

// Data structure for magnet specific global variables
typedef struct
{
    component_control_t common;
    uint16_t output_current;
    uint16_t output_voltage;
    uint16_t target_current;
    uint16_t pwm_output;
    uint16_t temperature;
}magnet_t;

EXT_DECL magnet_t magnet;     // Global variable space

// Different errors for the magnet
typedef enum
{
    MAGNET_NO_ERROR,
    MAGNET_OVER_CURRENT_ERROR,
    MAGNET_OVER_VOLTAGE_ERROR,
    MAGNET_POWER_GOOD_TIMEOUT_ERROR,
} magnet_error_t;

// hardware scaling factors
#define MAGNET_COUNTS_PER_AMPERE          711
#define MAGNET_COUNTS_PER_VOLT            102

// safe operating limits and targets
#define MAGNET_MAX_OUTPUT_CURRENT         5    // Amperes
#define MAGNET_MAX_OUTPUT_VOLTAGE         24   // Volts
#define MAGNET_POWER_GOOD_RANGE           0.1  // Amperes

// safe operating limits and targets in counts
#define MAGNET_MAX_I_OUT_COUNTS         MAGNET_MAX_OUTPUT_CURRENT * MAGNET_COUNTS_PER_AMPERE
#define MAGNET_MAX_V_OUT_COUNTS         MAGNET_MAX_OUTPUT_VOLTAGE * MAGNET_COUNTS_PER_VOLT
#define MAGNET_POWER_GOOD_RANGE_COUNTS  MAGNET_POWER_GOOD_RANGE * MAGNET_COUNTS_PER_AMPERE

#define DECLARE_MAGNET_HEALTH_ENTRY_0(_OUTPUT_CURRENT_, _OUTPUT_VOLTAGE_) { \
    {.data = _OUTPUT_CURRENT_,  .size = HEALTH_ENTRY_SIZE_2},   \
    {.data = _OUTPUT_VOLTAGE_,  .size = HEALTH_ENTRY_SIZE_2},   \
    {.data = 0,                 .size = HEALTH_ENTRY_SIZE_EOL}, \
}

#define DECLARE_MAGNET_HEALTH_ENTRY_1(_STATE_, _ERROR_, _PWM_) { \
    {.data = _STATE_,          .size = HEALTH_ENTRY_SIZE_1},   \
    {.data = _ERROR_,          .size = HEALTH_ENTRY_SIZE_1},   \
    {.data = _PWM_,            .size = HEALTH_ENTRY_SIZE_2},   \
    {.data = 0,                .size = HEALTH_ENTRY_SIZE_EOL}, \
}

#define DECLARE_MAGNET_HEALTH_ENTRY_2(_TEMP_) { \
    {.data = _TEMP_,                   .size = HEALTH_ENTRY_SIZE_2},   \
    {.data = 0,                        .size = HEALTH_ENTRY_SIZE_EOL}, \
}

#endif	/* MAGNET_MCU_H */

